package com.ravenclaw.service;

import java.util.Timer;
import java.util.TimerTask;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import com.ravenclaw.model.bankEntity;
import com.ravenclaw.repository.bankRepository;



@Service
public class bankService {

	@Autowired
	bankRepository repo;
	
	@Autowired
	JavaMailSender javaMailSender;

	bankEntity ref;
	
	public static int random;
	public static int time = 0;
	int i;
	Timer timer;
	TimerTask task;
	
	
	public boolean cardVerification(bankEntity input)
	{
		ref=repo.findBycardNumber(input.getCardNumber());
		System.out.println(ref);
		//System.out.println(ref.getName()+" "+ ref.getCardType()+" "+ ref.getCardNumber()+ " "+ref.getExpiryDate()+" "+ ref.getCvv());
		System.out.println(input.getExpiryDate()+"amount"+input.getBalance()+"name "+input.getName());
		if(ref != null)
		{
			if(ref.getBalance()>=input.getBalance())
			{
				
				if(ref.getName().equals(input.getName()) && ref.getCardNumber().equals(input.getCardNumber()) && ref.getCardType().equals(input.getCardType()) && ref.getExpiryDate().equals(input.getExpiryDate()) && ref.getCvv()==input.getCvv())
				{
					System.out.println("success");
					return true;
				}
				else 
				{
					System.out.println("Failed");
					return false;
				}
			}
			else 
			{
				System.out.println("Balance is less");
				return false;
			}
			
		}
		else
		{
			System.out.println("ref is null");
			return false;
		}
	}
	
	
	
	public bankEntity code(){
		int n=6;
		
		int min = 100000;
		int max = 999999;
		random = (int)(Math.random() * (max - min + 1) + min);
		
		
		SimpleMailMessage msg = new SimpleMailMessage();
		msg.setTo(ref.getEmail());
		msg.setSubject("Transaction OTP");
		msg.setText("Your OTP is: " + random + " Your OTP will expire in 5 Minutes");
		javaMailSender.send(msg);

		timer = new Timer();
		task = new TimerTask() {
			public void run() {
				time++;
				//System.out.println(time);
			}
		};
		timer.scheduleAtFixedRate(task, 1000, 1000);
		
		return ref;
	}
	
	
	
	
public boolean validate(int otpv) {

		
		if (otpv==random && time < 300) {
			System.out.println("matched");
			time = 0;
			timer.cancel();
			return true;

		} else {
			System.out.println("not");
			time = 0;
			timer.cancel();
			return false;
		}
	}
}
